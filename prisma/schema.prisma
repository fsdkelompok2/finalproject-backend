datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Customer {
    customer_id           String @id @default(uuid())
    email                 String @unique @db.VarChar(100)
    password              String @db.VarChar(255)
    first_name            String @db.VarChar(100)
    last_name             String @db.VarChar(100)
    shopping_preference   ShoppingPreference
    birth                 DateTime @db.Date

    shipment              Shipment[]
    address               Address[]
    cart                  Cart[]
    wishlist              Wishlist[]
    payment               Payment[]
    order                 Order[]

    @@map("customer")
}

enum ShoppingPreference {
    men
    woman
}

model Shipment {
    shipment_id         Int      @id @default(autoincrement())
    shipment_date       DateTime
    
    customer            Customer @relation(fields: [customer_id], references: [customer_id])
    customer_id         String
    
    ship_provider       Shipping_Provider @relation(fields: [ship_provider_id], references: [ship_provider_id])
    ship_provider_id    Int @unique

    address             Address @relation(fields: [address_id], references: [address_id])
    address_id          Int @unique

    order               Order[]

    @@map("shipment")
}

model Shipping_Provider {
    ship_provider_id        Int     @id @default(autoincrement())
    ship_provider_name      String  @db.VarChar(255)

    shipment                Shipment?

    @@map("shipping_provider")
}

model Address {
    address_id              Int      @id @default(autoincrement())
    street                  String   @db.VarChar(100)
    building                String   @db.VarChar(40)
    city                    String   @db.VarChar(40)
    postcode                String   @db.VarChar(12)
    province                String   @db.VarChar(40)
    phone                   String   @db.VarChar(20)
    country                 String   @db.VarChar(50)
    
    customer                Customer @relation(fields: [customer_id], references: [customer_id])
    customer_id             String   @unique
    
    shipment                Shipment?

    @@map("address")
}

model Cart {
    cart_id                 Int             @id @default(autoincrement())
    
    customer                Customer        @relation(fields: [customer_id], references: [customer_id])
    customer_id             String          @unique

    cart_item               Cart_Item[]
    order                   Order[]

    @@map("cart")
}

model Cart_Item {
    cart_item_id            Int @id @default(autoincrement())
    quantity                Int
    
    cart                    Cart @relation(fields: [cart_id], references: [cart_id])
    cart_id                 Int

    product_detail          Product_Details @relation(fields: [product_details_id], references: [product_details_id])
    product_details_id      Int @unique
}

model Wishlist {
    wishlist_id             Int  @id @default(autoincrement())
    
    customer                Customer @relation(fields: [customer_id], references: [customer_id])
    customer_id             String   @unique

    product                 Product []

    @@map("wishlist")
}

model Payment {
    payment_id              Int         @id @default(autoincrement())
    payment_date            DateTime
    payment_method          String      @db.VarChar(100)
    amount                  String
    
    customer                Customer @relation(fields: [customer_id], references: [customer_id])
    customer_id             String   @unique

    order                   Order[]

    @@map("payment")
}

model Product {
    product_id              Int         @id @default(autoincrement())
    product_name            String      @db.VarChar(255)
    product_description     String      @db.Text
    product_price           String
    product_thumb           String      
    sex_cat                 String      @db.VarChar(255)             
    createAt                DateTime    @default(now())

    wishlist                Wishlist[]
    
    category                Category    @relation(fields: [category_name], references: [category_name])
    category_name           String      

    product_image           Product_Image[]
    product_color           Product_Color[]
    product_size            Product_Size[]
    product_details         Product_Details[]
                    

    @@map("product")
}

model Category {
    category_name           String  @id @unique  
    category_desc           String  @db.VarChar(255)

    product                 Product[]

    @@map("category")
}

model Product_Image {
    product_image_id        Int     @id @default(autoincrement())
    image_url               String  @db.VarChar(255)
    image_width             Int
    image_height            Int
    
    product                 Product @relation(fields: [product_id], references: [product_id])
    product_id              Int

    product_color           Product_Color @relation(fields: [product_color_id], references: [product_color_id])
    product_color_id        Int

    @@map("product_image")
}

model Product_Details {
    product_details_id      Int     @id @default(autoincrement())
    product_stock           Int                     
    
    product                 Product @relation(fields: [product_id], references: [product_id])
    product_id              Int

    product_color           Product_Color @relation(fields: [product_color_id], references: [product_color_id])
    product_color_id        Int

    product_size            Product_Size @relation(fields: [product_size_id], references: [product_size_id])
    product_size_id         Int

    cart_item               Cart_Item?
    // cart                    Cart? @relation(fields: [cart_id], references: [cart_id])
    // cart_id                 Int?
}

model Product_Color {
    product_color_id        Int     @id @default(autoincrement())
    product_color_name      String  @db.VarChar(20)
    
    product                 Product @relation(fields: [product_id], references: [product_id])
    product_id              Int

    product_image           Product_Image[]

    product_details         Product_Details[]

    @@map("product_color")
}

model Product_Size {
    product_size_id         Int     @id @default(autoincrement())
    product_size_value      String

    product                 Product @relation(fields: [product_id], references: [product_id])
    product_id              Int

    product_details         Product_Details[]

    @@map("product_size")
}

model Order {
    order_id                Int       @id @default(autoincrement())
    order_date              DateTime
    total_price             String
    
    customer                Customer @relation(fields: [customer_id], references: [customer_id])
    customer_id             String

    shipment                Shipment @relation(fields: [shipment_id], references: [shipment_id])
    shipment_id             Int

    payment                 Payment  @relation(fields: [payment_id], references: [payment_id])
    payment_id              Int

    cart                    Cart     @relation(fields: [cart_id], references: [cart_id])
    cart_id                 Int

    @@map("order")
}

model Verification_Code {
    id         Int      @id @default(autoincrement())
    value      Int      @unique
    email      String

    @@map("verification_code")
}